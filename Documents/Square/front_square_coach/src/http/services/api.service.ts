/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * API de Agendamentos
 * API para gest√£o de agendamentos com usu√°rios, professores e alunos.
 * OpenAPI spec version: 1.0
 */
import {
  HttpClient
} from '@angular/common/http'
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse
} from '@angular/common/http'
import {
  Injectable
} from '@angular/core'
import {
  Observable
} from 'rxjs'
import type {
  AulaDisponivelDto,
  CreateAgendamentoDto,
  CreateAulaDisponivelDto,
  CreateUsuarioDto,
  LoginDto,
  PublicUsuarioDto,
  UpdateAulaDisponivelDto,
  UpdateUsuarioDto
} from '../../models'


const base_url = 'https://api.squarecoach.com.br'
type HttpClientOptions = {
  headers?: HttpHeaders | {
      [header: string]: string | string[];
  };
  context?: HttpContext;
  observe?: any;
  params?: HttpParams | {
    [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;
  };
  reportProgress?: boolean;
  responseType?: any;
  withCredentials?: boolean;
};



@Injectable({ providedIn: 'root' })
export class APIDeAgendamentosService {
  constructor(
    private http: HttpClient,
  ) {}/**
 * @summary Login de usu√°rio
 */
 authControllerLogin<TData = void>(
    loginDto: LoginDto, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;

    authControllerLogin<TData = void>(
    loginDto: LoginDto, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;

    authControllerLogin<TData = void>(
    loginDto: LoginDto, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;authControllerLogin<TData = void>(
    loginDto: LoginDto, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.post<TData>(
      `${base_url}/auth/login`,
      loginDto,options
    );
  }

/**
 * @summary Cria um novo usu√°rio
 */
 usuariosControllerCreate<TData = void>(
    createUsuarioDto: CreateUsuarioDto, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    usuariosControllerCreate<TData = void>(
    createUsuarioDto: CreateUsuarioDto, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    usuariosControllerCreate<TData = void>(
    createUsuarioDto: CreateUsuarioDto, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;usuariosControllerCreate<TData = void>(
    createUsuarioDto: CreateUsuarioDto, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.post<TData>(
      `/usuarios`,
      createUsuarioDto,options
    );
  }

/**
 * @summary Lista todos os usu√°rios
 */
 usuariosControllerFindAll<TData = PublicUsuarioDto[]>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    usuariosControllerFindAll<TData = PublicUsuarioDto[]>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    usuariosControllerFindAll<TData = PublicUsuarioDto[]>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;usuariosControllerFindAll<TData = PublicUsuarioDto[]>(
     options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `/usuarios`,options
    );
  }

/**
 * @summary Lista todos os alunos
 */
 usuariosControllerFindAllAlunos<TData = PublicUsuarioDto[]>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    usuariosControllerFindAllAlunos<TData = PublicUsuarioDto[]>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    usuariosControllerFindAllAlunos<TData = PublicUsuarioDto[]>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;usuariosControllerFindAllAlunos<TData = PublicUsuarioDto[]>(
     options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `/usuarios/alunos`,options
    );
  }

/**
 * @summary Obt√©m os detalhes de um usu√°rio pelo ID
 */
 usuariosControllerFindOne<TData = void>(
    id: number, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    usuariosControllerFindOne<TData = void>(
    id: number, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    usuariosControllerFindOne<TData = void>(
    id: number, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;usuariosControllerFindOne<TData = void>(
    id: number, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `/usuarios/${id}`,options
    );
  }

/**
 * @summary Atualiza os dados de um usu√°rio pelo ID
 */
 usuariosControllerUpdate<TData = void>(
    id: number,
    updateUsuarioDto: UpdateUsuarioDto, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    usuariosControllerUpdate<TData = void>(
    id: number,
    updateUsuarioDto: UpdateUsuarioDto, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    usuariosControllerUpdate<TData = void>(
    id: number,
    updateUsuarioDto: UpdateUsuarioDto, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;usuariosControllerUpdate<TData = void>(
    id: number,
    updateUsuarioDto: UpdateUsuarioDto, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.put<TData>(
      `/usuarios/${id}`,
      updateUsuarioDto,options
    );
  }

/**
 * @summary Remove um usu√°rio pelo ID
 */
 usuariosControllerRemove<TData = void>(
    id: number, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    usuariosControllerRemove<TData = void>(
    id: number, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    usuariosControllerRemove<TData = void>(
    id: number, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;usuariosControllerRemove<TData = void>(
    id: number, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.delete<TData>(
      `/usuarios/${id}`,options
    );
  }

/**
 * @summary Cria uma nova aula dispon√≠vel
 */
 aulasDisponiveisControllerCreate<TData = void>(
    createAulaDisponivelDto: CreateAulaDisponivelDto, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    aulasDisponiveisControllerCreate<TData = void>(
    createAulaDisponivelDto: CreateAulaDisponivelDto, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    aulasDisponiveisControllerCreate<TData = void>(
    createAulaDisponivelDto: CreateAulaDisponivelDto, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;aulasDisponiveisControllerCreate<TData = void>(
    createAulaDisponivelDto: CreateAulaDisponivelDto, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.post<TData>(
      `/aulas-disponiveis`,
      createAulaDisponivelDto,options
    );
  }

/**
 * @summary Lista todas as aulas dispon√≠veis
 */
 aulasDisponiveisControllerFindAll<TData = AulaDisponivelDto[]>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    aulasDisponiveisControllerFindAll<TData = AulaDisponivelDto[]>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    aulasDisponiveisControllerFindAll<TData = AulaDisponivelDto[]>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;aulasDisponiveisControllerFindAll<TData = AulaDisponivelDto[]>(
     options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `/aulas-disponiveis`,options
    );
  }

/**
 * @summary Lista todas as aulas vinculadas a um professor espec√≠fico
 */
 aulasDisponiveisControllerFindAllByProfessorId<TData = AulaDisponivelDto[]>(
    id: number, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    aulasDisponiveisControllerFindAllByProfessorId<TData = AulaDisponivelDto[]>(
    id: number, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    aulasDisponiveisControllerFindAllByProfessorId<TData = AulaDisponivelDto[]>(
    id: number, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;aulasDisponiveisControllerFindAllByProfessorId<TData = AulaDisponivelDto[]>(
    id: number, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `/aulas-disponiveis/professor/${id}`,options
    );
  }

/**
 * @summary Obt√©m os detalhes de uma aula pelo ID
 */
 aulasDisponiveisControllerFindOne<TData = void>(
    id: number, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    aulasDisponiveisControllerFindOne<TData = void>(
    id: number, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    aulasDisponiveisControllerFindOne<TData = void>(
    id: number, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;aulasDisponiveisControllerFindOne<TData = void>(
    id: number, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `/aulas-disponiveis/${id}`,options
    );
  }

/**
 * @summary Atualiza os dados de uma aula pelo ID
 */
 aulasDisponiveisControllerUpdate<TData = void>(
    id: number,
    updateAulaDisponivelDto: UpdateAulaDisponivelDto, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    aulasDisponiveisControllerUpdate<TData = void>(
    id: number,
    updateAulaDisponivelDto: UpdateAulaDisponivelDto, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    aulasDisponiveisControllerUpdate<TData = void>(
    id: number,
    updateAulaDisponivelDto: UpdateAulaDisponivelDto, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;aulasDisponiveisControllerUpdate<TData = void>(
    id: number,
    updateAulaDisponivelDto: UpdateAulaDisponivelDto, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.put<TData>(
      `/aulas-disponiveis/${id}`,
      updateAulaDisponivelDto,options
    );
  }

/**
 * @summary Remove uma aula pelo ID
 */
 aulasDisponiveisControllerRemove<TData = void>(
    id: number, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    aulasDisponiveisControllerRemove<TData = void>(
    id: number, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    aulasDisponiveisControllerRemove<TData = void>(
    id: number, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;aulasDisponiveisControllerRemove<TData = void>(
    id: number, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.delete<TData>(
      `/aulas-disponiveis/${id}`,options
    );
  }

/**
 * @summary Cria um novo agendamento
 */
 agendamentosControllerCreate<TData = void>(
    createAgendamentoDto: CreateAgendamentoDto, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    agendamentosControllerCreate<TData = void>(
    createAgendamentoDto: CreateAgendamentoDto, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    agendamentosControllerCreate<TData = void>(
    createAgendamentoDto: CreateAgendamentoDto, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;agendamentosControllerCreate<TData = void>(
    createAgendamentoDto: CreateAgendamentoDto, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.post<TData>(
      `/agendamentos/vincularAluno`,
      createAgendamentoDto,options
    );
  }

/**
 * @summary Obt√©m os detalhes da aula e todos os alunos vinculados a uma aula pelo ID da aula
 */
 agendamentosControllerFindAulaWithAlunos<TData = void>(
    idAula: number, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    agendamentosControllerFindAulaWithAlunos<TData = void>(
    idAula: number, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    agendamentosControllerFindAulaWithAlunos<TData = void>(
    idAula: number, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;agendamentosControllerFindAulaWithAlunos<TData = void>(
    idAula: number, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `/agendamentos/aula/${idAula}/detalhes`,options
    );
  }

/**
 * @summary Obt√©m lista de todos os agendamentos
 */
 agendamentosControllerFindAll<TData = void>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    agendamentosControllerFindAll<TData = void>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    agendamentosControllerFindAll<TData = void>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;agendamentosControllerFindAll<TData = void>(
     options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `/agendamentos/todos`,options
    );
  }

/**
 * @summary Lista todos os agendamentos
 */
 agendamentosControllerFindAulasComAlunos<TData = void>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    agendamentosControllerFindAulasComAlunos<TData = void>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    agendamentosControllerFindAulasComAlunos<TData = void>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;agendamentosControllerFindAulasComAlunos<TData = void>(
     options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `/agendamentos`,options
    );
  }

 agendamentosControllerFindAulasDoProfessor<TData = void>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    agendamentosControllerFindAulasDoProfessor<TData = void>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    agendamentosControllerFindAulasDoProfessor<TData = void>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;agendamentosControllerFindAulasDoProfessor<TData = void>(
     options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `/agendamentos/professor`,options
    );
  }

/**
 * @summary Obt√©m os detalhes de um agendamento pelo ID
 */
 agendamentosControllerFindOne<TData = void>(
    id: number, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    agendamentosControllerFindOne<TData = void>(
    id: number, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    agendamentosControllerFindOne<TData = void>(
    id: number, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;agendamentosControllerFindOne<TData = void>(
    id: number, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `/agendamentos/${id}`,options
    );
  }

/**
 * @summary Remove um aluno espec√≠fico de uma aula pelo ID da aula e ID do aluno
 */
 agendamentosControllerRemoveAlunoFromAula<TData = void>(
    idAula: number,
    idAluno: number, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    agendamentosControllerRemoveAlunoFromAula<TData = void>(
    idAula: number,
    idAluno: number, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    agendamentosControllerRemoveAlunoFromAula<TData = void>(
    idAula: number,
    idAluno: number, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;agendamentosControllerRemoveAlunoFromAula<TData = void>(
    idAula: number,
    idAluno: number, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.delete<TData>(
      `/agendamentos/aula/${idAula}/aluno/${idAluno}`,options
    );
  }

};

export type AuthControllerLoginClientResult = NonNullable<void>
export type UsuariosControllerCreateClientResult = NonNullable<void>
export type UsuariosControllerFindAllClientResult = NonNullable<PublicUsuarioDto[]>
export type UsuariosControllerFindAllAlunosClientResult = NonNullable<PublicUsuarioDto[]>
export type UsuariosControllerFindOneClientResult = NonNullable<void>
export type UsuariosControllerUpdateClientResult = NonNullable<void>
export type UsuariosControllerRemoveClientResult = NonNullable<void>
export type AulasDisponiveisControllerCreateClientResult = NonNullable<void>
export type AulasDisponiveisControllerFindAllClientResult = NonNullable<AulaDisponivelDto[]>
export type AulasDisponiveisControllerFindAllByProfessorIdClientResult = NonNullable<AulaDisponivelDto[]>
export type AulasDisponiveisControllerFindOneClientResult = NonNullable<void>
export type AulasDisponiveisControllerUpdateClientResult = NonNullable<void>
export type AulasDisponiveisControllerRemoveClientResult = NonNullable<void>
export type AgendamentosControllerCreateClientResult = NonNullable<void>
export type AgendamentosControllerFindAulaWithAlunosClientResult = NonNullable<void>
export type AgendamentosControllerFindAllClientResult = NonNullable<void>
export type AgendamentosControllerFindAulasComAlunosClientResult = NonNullable<void>
export type AgendamentosControllerFindAulasDoProfessorClientResult = NonNullable<void>
export type AgendamentosControllerFindOneClientResult = NonNullable<void>
export type AgendamentosControllerRemoveAlunoFromAulaClientResult = NonNullable<void>
